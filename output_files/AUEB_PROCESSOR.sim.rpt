Simulator report for AUEB_PROCESSOR
Mon Apr 11 14:57:58 2022
Quartus II 64-Bit Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. Simulator Summary
  3. Simulator Settings
  4. Simulation Waveforms
  5. Coverage Summary
  6. Complete 1/0-Value Coverage
  7. Missing 1-Value Coverage
  8. Missing 0-Value Coverage
  9. Simulator INI Usage
 10. Simulator Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+--------------------------------------------+
; Simulator Summary                          ;
+-----------------------------+--------------+
; Type                        ; Value        ;
+-----------------------------+--------------+
; Simulation Start Time       ; 0 ps         ;
; Simulation End Time         ; 1.0 us       ;
; Simulation Netlist Size     ; 162 nodes    ;
; Simulation Coverage         ;      43.83 % ;
; Total Number of Transitions ; 286          ;
; Simulation Breakpoints      ; 0            ;
; Family                      ; Cyclone II   ;
+-----------------------------+--------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Simulator Settings                                                                                                                                                ;
+--------------------------------------------------------------------------------------------+------------------------------------------------------+---------------+
; Option                                                                                     ; Setting                                              ; Default Value ;
+--------------------------------------------------------------------------------------------+------------------------------------------------------+---------------+
; Simulation mode                                                                            ; Functional                                           ; Timing        ;
; Start time                                                                                 ; 0 ns                                                 ; 0 ns          ;
; Simulation results format                                                                  ; VWF                                                  ;               ;
; Vector input source                                                                        ; /home/niemand/altera/aueb_processor/ALU/Waveform.vwf ;               ;
; Add pins automatically to simulation output waveforms                                      ; On                                                   ; On            ;
; Check outputs                                                                              ; Off                                                  ; Off           ;
; Report simulation coverage                                                                 ; On                                                   ; On            ;
; Display complete 1/0 value coverage report                                                 ; On                                                   ; On            ;
; Display missing 1-value coverage report                                                    ; On                                                   ; On            ;
; Display missing 0-value coverage report                                                    ; On                                                   ; On            ;
; Detect setup and hold time violations                                                      ; Off                                                  ; Off           ;
; Detect glitches                                                                            ; Off                                                  ; Off           ;
; Disable timing delays in Timing Simulation                                                 ; Off                                                  ; Off           ;
; Generate Signal Activity File                                                              ; Off                                                  ; Off           ;
; Generate VCD File for PowerPlay Power Analyzer                                             ; Off                                                  ; Off           ;
; Group bus channels in simulation results                                                   ; Off                                                  ; Off           ;
; Preserve fewer signal transitions to reduce memory requirements                            ; On                                                   ; On            ;
; Trigger vector comparison with the specified mode                                          ; INPUT_EDGE                                           ; INPUT_EDGE    ;
; Disable setup and hold time violations detection in input registers of bi-directional pins ; Off                                                  ; Off           ;
; Overwrite Waveform Inputs With Simulation Outputs                                          ; Off                                                  ;               ;
; Perform Glitch Filtering in Timing Simulation                                              ; Auto                                                 ; Auto          ;
+--------------------------------------------------------------------------------------------+------------------------------------------------------+---------------+


+----------------------+
; Simulation Waveforms ;
+----------------------+
Waveform report data cannot be output to ASCII.
Please use Quartus II 64-Bit to view the waveform report data.


+--------------------------------------------------------------------+
; Coverage Summary                                                   ;
+-----------------------------------------------------+--------------+
; Type                                                ; Value        ;
+-----------------------------------------------------+--------------+
; Total coverage as a percentage                      ;      43.83 % ;
; Total nodes checked                                 ; 162          ;
; Total output ports checked                          ; 162          ;
; Total output ports with complete 1/0-value coverage ; 71           ;
; Total output ports with no 1/0-value coverage       ; 52           ;
; Total output ports with no 1-value coverage         ; 78           ;
; Total output ports with no 0-value coverage         ; 65           ;
+-----------------------------------------------------+--------------+


The following table displays output ports that toggle between 1 and 0 during simulation.
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Complete 1/0-Value Coverage                                                                                                                                                                              ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; Node Name                                                                                 ; Output Port Name                                                                          ; Output Port Type ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; |FLIP_FLOP_16bit|d[0]                                                                     ; |FLIP_FLOP_16bit|d[0]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[2]                                                                     ; |FLIP_FLOP_16bit|d[2]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[3]                                                                     ; |FLIP_FLOP_16bit|d[3]                                                                     ; out              ;
; |FLIP_FLOP_16bit|clock                                                                    ; |FLIP_FLOP_16bit|clock                                                                    ; out              ;
; |FLIP_FLOP_16bit|enable                                                                   ; |FLIP_FLOP_16bit|enable                                                                   ; out              ;
; |FLIP_FLOP_16bit|out1[0]                                                                  ; |FLIP_FLOP_16bit|out1[0]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[2]                                                                  ; |FLIP_FLOP_16bit|out1[2]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[3]                                                                  ; |FLIP_FLOP_16bit|out1[3]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:0:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:2:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:3:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|AND_gate:FF12|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|AND_gate:FF12|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|AND_gate:FF10|out1               ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|AND_gate:FF10|out1               ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|AND_gate:FF10|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|AND_gate:FF10|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|AND_gate:FF10|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|AND_gate:FF10|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|AND_gate:FF10|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|AND_gate:FF12|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|AND_gate:FF12|out1              ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|AND_gate:FF10|out1              ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|AND_gate:FF10|out1              ; out0             ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+


The following table displays output ports that do not toggle to 1 during simulation.
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Missing 1-Value Coverage                                                                                                                                                                                 ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; Node Name                                                                                 ; Output Port Name                                                                          ; Output Port Type ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; |FLIP_FLOP_16bit|d[1]                                                                     ; |FLIP_FLOP_16bit|d[1]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[4]                                                                     ; |FLIP_FLOP_16bit|d[4]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[5]                                                                     ; |FLIP_FLOP_16bit|d[5]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[6]                                                                     ; |FLIP_FLOP_16bit|d[6]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[7]                                                                     ; |FLIP_FLOP_16bit|d[7]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[8]                                                                     ; |FLIP_FLOP_16bit|d[8]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[9]                                                                     ; |FLIP_FLOP_16bit|d[9]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[10]                                                                    ; |FLIP_FLOP_16bit|d[10]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[11]                                                                    ; |FLIP_FLOP_16bit|d[11]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[12]                                                                    ; |FLIP_FLOP_16bit|d[12]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[13]                                                                    ; |FLIP_FLOP_16bit|d[13]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[14]                                                                    ; |FLIP_FLOP_16bit|d[14]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[15]                                                                    ; |FLIP_FLOP_16bit|d[15]                                                                    ; out              ;
; |FLIP_FLOP_16bit|out1[1]                                                                  ; |FLIP_FLOP_16bit|out1[1]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[4]                                                                  ; |FLIP_FLOP_16bit|out1[4]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[5]                                                                  ; |FLIP_FLOP_16bit|out1[5]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[6]                                                                  ; |FLIP_FLOP_16bit|out1[6]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[7]                                                                  ; |FLIP_FLOP_16bit|out1[7]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[8]                                                                  ; |FLIP_FLOP_16bit|out1[8]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[9]                                                                  ; |FLIP_FLOP_16bit|out1[9]                                                                  ; pin_out          ;
; |FLIP_FLOP_16bit|out1[10]                                                                 ; |FLIP_FLOP_16bit|out1[10]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|out1[11]                                                                 ; |FLIP_FLOP_16bit|out1[11]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|out1[12]                                                                 ; |FLIP_FLOP_16bit|out1[12]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|out1[13]                                                                 ; |FLIP_FLOP_16bit|out1[13]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|out1[14]                                                                 ; |FLIP_FLOP_16bit|out1[14]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|out1[15]                                                                 ; |FLIP_FLOP_16bit|out1[15]                                                                 ; pin_out          ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF14|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF14|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+


The following table displays output ports that do not toggle to 0 during simulation.
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Missing 0-Value Coverage                                                                                                                                                                                 ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; Node Name                                                                                 ; Output Port Name                                                                          ; Output Port Type ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+
; |FLIP_FLOP_16bit|d[1]                                                                     ; |FLIP_FLOP_16bit|d[1]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[4]                                                                     ; |FLIP_FLOP_16bit|d[4]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[5]                                                                     ; |FLIP_FLOP_16bit|d[5]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[6]                                                                     ; |FLIP_FLOP_16bit|d[6]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[7]                                                                     ; |FLIP_FLOP_16bit|d[7]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[8]                                                                     ; |FLIP_FLOP_16bit|d[8]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[9]                                                                     ; |FLIP_FLOP_16bit|d[9]                                                                     ; out              ;
; |FLIP_FLOP_16bit|d[10]                                                                    ; |FLIP_FLOP_16bit|d[10]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[11]                                                                    ; |FLIP_FLOP_16bit|d[11]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[12]                                                                    ; |FLIP_FLOP_16bit|d[12]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[13]                                                                    ; |FLIP_FLOP_16bit|d[13]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[14]                                                                    ; |FLIP_FLOP_16bit|d[14]                                                                    ; out              ;
; |FLIP_FLOP_16bit|d[15]                                                                    ; |FLIP_FLOP_16bit|d[15]                                                                    ; out              ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:1:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:4:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:5:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:6:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:7:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:8:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF14|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF13|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR2|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:9:FF160|SR_LATCH:FF11|AND_gate:SR0|out1  ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:10:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:11:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:12:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:13:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:14:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF14|AND_gate:SR0|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF13|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR2|out1 ; out0             ;
; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; |FLIP_FLOP_16bit|FLIP_FLOP_1bit:\flip_flops_loop:15:FF160|SR_LATCH:FF11|AND_gate:SR0|out1 ; out0             ;
+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+------------------+


+---------------------+
; Simulator INI Usage ;
+--------+------------+
; Option ; Usage      ;
+--------+------------+


+--------------------+
; Simulator Messages ;
+--------------------+
Info: *******************************************************************
Info: Running Quartus II 64-Bit Simulator
    Info: Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
    Info: Processing started: Mon Apr 11 14:57:58 2022
Info: Command: quartus_sim --simulation_results_format=VWF AUEB_PROCESSOR -c AUEB_PROCESSOR
Info (324025): Using vector source file "/home/niemand/altera/aueb_processor/ALU/Waveform.vwf"
Info (310003): Option to preserve fewer signal transitions to reduce memory requirements is enabled
    Info (310004): Simulation has been partitioned into sub-simulations according to the maximum transition count determined by the engine. Transitions from memory will be flushed out to disk at the end of each sub-simulation to reduce memory requirements.
Info (310002): Simulation partitioned into 1 sub-simulations
Info (328053): Simulation coverage is      43.83 %
Info (328052): Number of transitions in simulation is 286
Info (324045): Vector file AUEB_PROCESSOR.sim.vwf is saved in VWF text format. You can compress it into CVWF format in order to reduce file size. For more details please refer to the Quartus II Help.
Info: Quartus II 64-Bit Simulator was successful. 0 errors, 0 warnings
    Info: Peak virtual memory: 645 megabytes
    Info: Processing ended: Mon Apr 11 14:57:58 2022
    Info: Elapsed time: 00:00:00
    Info: Total CPU time (on all processors): 00:00:00


