// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2022 18:33:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    forwarder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module forwarder_vlg_sample_tst(
	R1AD,
	R2AD,
	RegAD_EXMEM,
	RegAD_MEMWB,
	sampler_tx
);
input [2:0] R1AD;
input [2:0] R2AD;
input [2:0] RegAD_EXMEM;
input [2:0] RegAD_MEMWB;
output sampler_tx;

reg sample;
time current_time;
always @(R1AD or R2AD or RegAD_EXMEM or RegAD_MEMWB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module forwarder_vlg_check_tst (
	S1,
	S2,
	sampler_rx
);
input [1:0] S1;
input [1:0] S2;
input sampler_rx;

reg [1:0] S1_expected;
reg [1:0] S2_expected;

reg [1:0] S1_prev;
reg [1:0] S2_prev;

reg [1:0] S1_expected_prev;
reg [1:0] S2_expected_prev;

reg [1:0] last_S1_exp;
reg [1:0] last_S2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	S1_prev = S1;
	S2_prev = S2;
end

// update expected /o prevs

always @(trigger)
begin
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
end


// expected S1[ 1 ]
initial
begin
	S1_expected[1] = 1'bX;
end 
// expected S1[ 0 ]
initial
begin
	S1_expected[0] = 1'bX;
end 
// expected S2[ 1 ]
initial
begin
	S2_expected[1] = 1'bX;
end 
// expected S2[ 0 ]
initial
begin
	S2_expected[0] = 1'bX;
end 
// generate trigger
always @(S1_expected or S1 or S2_expected or S2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S1 = %b | expected S2 = %b | ",S1_expected_prev,S2_expected_prev);
	$display("| real S1 = %b | real S2 = %b | ",S1_prev,S2_prev);
`endif
	if (
		( S1_expected_prev[0] !== 1'bx ) && ( S1_prev[0] !== S1_expected_prev[0] )
		&& ((S1_expected_prev[0] !== last_S1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[0] = S1_expected_prev[0];
	end
	if (
		( S1_expected_prev[1] !== 1'bx ) && ( S1_prev[1] !== S1_expected_prev[1] )
		&& ((S1_expected_prev[1] !== last_S1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[1] = S1_expected_prev[1];
	end
	if (
		( S2_expected_prev[0] !== 1'bx ) && ( S2_prev[0] !== S2_expected_prev[0] )
		&& ((S2_expected_prev[0] !== last_S2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[0] = S2_expected_prev[0];
	end
	if (
		( S2_expected_prev[1] !== 1'bx ) && ( S2_prev[1] !== S2_expected_prev[1] )
		&& ((S2_expected_prev[1] !== last_S2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[1] = S2_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#140000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module forwarder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] R1AD;
reg [2:0] R2AD;
reg [2:0] RegAD_EXMEM;
reg [2:0] RegAD_MEMWB;
// wires                                               
wire [1:0] S1;
wire [1:0] S2;

wire sampler;                             

// assign statements (if any)                          
forwarder i1 (
// port map - connection between master ports and signals/registers   
	.R1AD(R1AD),
	.R2AD(R2AD),
	.RegAD_EXMEM(RegAD_EXMEM),
	.RegAD_MEMWB(RegAD_MEMWB),
	.S1(S1),
	.S2(S2)
);
// R1AD[ 2 ]
initial
begin
	R1AD[2] = 1'b0;
end 
// R1AD[ 1 ]
initial
begin
	R1AD[1] = 1'b0;
end 
// R1AD[ 0 ]
initial
begin
	R1AD[0] = 1'b1;
end 
// R2AD[ 2 ]
initial
begin
	R2AD[2] = 1'b0;
end 
// R2AD[ 1 ]
initial
begin
	R2AD[1] = 1'b1;
end 
// R2AD[ 0 ]
initial
begin
	R2AD[0] = 1'b0;
end 
// RegAD_EXMEM[ 2 ]
initial
begin
	RegAD_EXMEM[2] = 1'b1;
	RegAD_EXMEM[2] = #20000 1'b0;
	RegAD_EXMEM[2] = #40000 1'b1;
	RegAD_EXMEM[2] = #40000 1'b0;
end 
// RegAD_EXMEM[ 1 ]
initial
begin
	RegAD_EXMEM[1] = 1'b1;
	RegAD_EXMEM[1] = #20000 1'b0;
	RegAD_EXMEM[1] = #20000 1'b1;
	RegAD_EXMEM[1] = #60000 1'b0;
	RegAD_EXMEM[1] = #20000 1'b1;
end 
// RegAD_EXMEM[ 0 ]
initial
begin
	RegAD_EXMEM[0] = 1'b1;
	RegAD_EXMEM[0] = #40000 1'b0;
	RegAD_EXMEM[0] = #20000 1'b1;
	RegAD_EXMEM[0] = #60000 1'b0;
end 
// RegAD_MEMWB[ 2 ]
initial
begin
	RegAD_MEMWB[2] = 1'b1;
	RegAD_MEMWB[2] = #60000 1'b0;
end 
// RegAD_MEMWB[ 1 ]
initial
begin
	RegAD_MEMWB[1] = 1'b1;
	RegAD_MEMWB[1] = #60000 1'b0;
	RegAD_MEMWB[1] = #20000 1'b1;
	RegAD_MEMWB[1] = #40000 1'b0;
end 
// RegAD_MEMWB[ 0 ]
initial
begin
	RegAD_MEMWB[0] = 1'b1;
	RegAD_MEMWB[0] = #80000 1'b0;
	RegAD_MEMWB[0] = #40000 1'b1;
end 

forwarder_vlg_sample_tst tb_sample (
	.R1AD(R1AD),
	.R2AD(R2AD),
	.RegAD_EXMEM(RegAD_EXMEM),
	.RegAD_MEMWB(RegAD_MEMWB),
	.sampler_tx(sampler)
);

forwarder_vlg_check_tst tb_out(
	.S1(S1),
	.S2(S2),
	.sampler_rx(sampler)
);
endmodule

