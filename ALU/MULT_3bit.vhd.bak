library ieee;
use ieee.std_logic_1164.all;

entity MULT_1bit is
port(in1, in2, in3, in4, in5, in6: in std_logic_vector(15 downto 0);
	select_bits: in std_logic_vector(2 downto 0);
	out1: out std_logic_vector(15 downto 0));
end MULT_1bit;

architecture Mult1BitLogic of MULT_1bit is
	component AND_16bit is
	port(in1, in2: in std_logic_vector(15 downto 0);
		out1: out std_logic_vector(15 downto 0));
	end component AND_16bit;

	component OR_16bit is
	port(in1, in2: in std_logic_vector(15 downto 0);
		out1: out std_logic_vector(15 downto 0));
	end component OR_16bit;
	
	component NOT_gate is
	port(in1: in std_logic;
		out1: out std_logic);
	end component NOT_gate;

	signal first_not_results_vec, second_not_results_vec, third_not_results_vec: std_logic_vector(15 downto 0);
	signal first_select_vec, second_select_vec, third_select_vec: std_logic_vector(15 downto 0);
	signal first_and_result, second_and_result: std_logic_vector(15 downto 0);
	signal not_results: std_logic_vector(2 downto 0);

begin
	M10: NOT_gate port map(select_bits(0), not_results(0));
	M11: NOT_gate port map(select_bits(1), not_result(1));
	M12: NOT_gate port map(select_bits(2), not_result(2));
	
	

	M11: AND_16bit port map(in1, not_result_vec, first_and_result);
	M12: AND_16bit port map(in2, select_vec, second_and_result);
	M13: OR_16bit port map(first_and_result, second_and_result, out1);
end Mult1BitLogic;